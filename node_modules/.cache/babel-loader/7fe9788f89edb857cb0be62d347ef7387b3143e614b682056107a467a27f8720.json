{"ast":null,"code":"export default function parseSAID(text){const parts=text.split(\"|\");if(parts.length<4)return null;const[id,surname,name,nationality]=parts;const dob=id.substring(0,6);const birthYear=parseInt(dob.substring(0,2),10);const fullYear=birthYear>25?1900+birthYear:2000+birthYear;return{idNumber:id,surname,name,dateOfBirth:\"\".concat(fullYear,\"-\").concat(dob.substring(2,4),\"-\").concat(dob.substring(4,6)),nationality};}","map":{"version":3,"names":["parseSAID","text","parts","split","length","id","surname","name","nationality","dob","substring","birthYear","parseInt","fullYear","idNumber","dateOfBirth","concat"],"sources":["/workspaces/sa-id-scanner/src/utils/parseSAID.js"],"sourcesContent":["export default function parseSAID(text) {\n  const parts = text.split(\"|\");\n  if (parts.length < 4) return null;\n\n  const [id, surname, name, nationality] = parts;\n  const dob = id.substring(0, 6);\n\n  const birthYear = parseInt(dob.substring(0, 2), 10);\n  const fullYear = birthYear > 25 ? 1900 + birthYear : 2000 + birthYear;\n\n  return {\n    idNumber: id,\n    surname,\n    name,\n    dateOfBirth: `${fullYear}-${dob.substring(2, 4)}-${dob.substring(4, 6)}`,\n    nationality,\n  };\n}\n"],"mappings":"AAAA,cAAe,SAAS,CAAAA,SAASA,CAACC,IAAI,CAAE,CACtC,KAAM,CAAAC,KAAK,CAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAC7B,GAAID,KAAK,CAACE,MAAM,CAAG,CAAC,CAAE,MAAO,KAAI,CAEjC,KAAM,CAACC,EAAE,CAAEC,OAAO,CAAEC,IAAI,CAAEC,WAAW,CAAC,CAAGN,KAAK,CAC9C,KAAM,CAAAO,GAAG,CAAGJ,EAAE,CAACK,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAE9B,KAAM,CAAAC,SAAS,CAAGC,QAAQ,CAACH,GAAG,CAACC,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CACnD,KAAM,CAAAG,QAAQ,CAAGF,SAAS,CAAG,EAAE,CAAG,IAAI,CAAGA,SAAS,CAAG,IAAI,CAAGA,SAAS,CAErE,MAAO,CACLG,QAAQ,CAAET,EAAE,CACZC,OAAO,CACPC,IAAI,CACJQ,WAAW,IAAAC,MAAA,CAAKH,QAAQ,MAAAG,MAAA,CAAIP,GAAG,CAACC,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,MAAAM,MAAA,CAAIP,GAAG,CAACC,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CACxEF,WACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}